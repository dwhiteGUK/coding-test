import { useEffect, useState } from 'react'
import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import styles from '../styles/Home.module.css'

export default function Home({ data }) {
  const [userId, setUserId] = useState(null)
  const [initialData, _] = useState(data)
  const [albums, setAlbums] = useState(data)

  useEffect(() => {
    if (!userId) return

    const userRes = async () => {
      const res = await fetch(`https://jsonplaceholder.typicode.com/albums?userId=${userId}`)
      const data = await res.json()

      if (userRes.status === 404 && userRes.statusText === 'Not Found') {

      }

      setAlbums(data)
    }

    userRes()

  }, [userId])

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Albums
        </h1>
        {!data && <p><strong>No Albums Found</strong></p>}

        <button onClick={() => setAlbums(initialData)}>Show All</button>

        {albums && (
          <ul className={styles['album-list']}>
            {albums.map(({ id, title, userId }) => (
              <li key={id} className={styles['list-item']}>
                <Link href={`/album/${id}`}>
                  <a>{title}</a>
                </Link>

                <button onClick={() => setUserId(userId)}>User: {userId}</button>
              </li>
            ))}
          </ul>
        )}


      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export async function getStaticProps() {

  const res = await fetch('https://jsonplaceholder.typicode.com/albums')
  const data = await res.json()

  if (res.status === 404 && res.statusText === 'Not Found') {
    return {
      notFound: true,
    }
  }

  return {
    props: { data },
  }
}
